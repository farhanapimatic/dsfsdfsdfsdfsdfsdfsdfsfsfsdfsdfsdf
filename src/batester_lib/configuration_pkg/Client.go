/*
 * batester_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

package configuration_pkg

import(
	"batester_lib/apihelper_pkg"
	"batester_lib/models_pkg"
)
/* Setting up enums for Environments and Servers 
*/
type Environments int

type Servers int

const (
     PRODUCTION Environments = 1 + iota
     TESTING
)
const (
 	 DEFAULT Servers = 1 + iota
   	 AUTH_SERVER
)

type CONFIGURATION_IMPL struct {
    /** Replace the value of port with SetPort function */
    port *string
    /** Replace the value of suites with SetSuites function */
    suites models_pkg.SuiteCodeEnum
/** The username to use with basic authentication */
    /** Replace the value of basicauthusername with SetBasicAuthUserName function */
    basicauthusername string
/** The password to use with basic authentication */
    /** Replace the value of basicauthpassword with SetBasicAuthPassword function */
    basicauthpassword string
}
 
/*
 * Getter function returning port
 */
func (me *CONFIGURATION_IMPL) Port() *string{
     return me.port
}

/*
 * Getter function returning suites
 */
func (me *CONFIGURATION_IMPL) Suites() models_pkg.SuiteCodeEnum{
     return me.suites
}

  
/*
 * Getter function returning basicauthusername
 */
func (me *CONFIGURATION_IMPL) BasicAuthUserName() string{
     return me.basicauthusername
}

/*
 * Getter function returning basicauthpassword
 */
func (me *CONFIGURATION_IMPL) BasicAuthPassword() string{
     return me.basicauthpassword
}

/*
 * Setter function setting up port
 */
func (me *CONFIGURATION_IMPL) SetPort(port *string) {
      me.port = port
}

/*
 * Setter function setting up suites
 */
func (me *CONFIGURATION_IMPL) SetSuites(suites models_pkg.SuiteCodeEnum) {
      me.suites = suites
}

/*
 * Setter function setting up basicauthusername
 */
func (me *CONFIGURATION_IMPL) SetBasicAuthUserName(basicAuthUserName string) {
      me.basicauthusername = basicAuthUserName
}

/*
 * Setter function setting up basicauthpassword
 */
func (me *CONFIGURATION_IMPL) SetBasicAuthPassword(basicAuthPassword string) {
      me.basicauthpassword = basicAuthPassword
}

// Setting up Default Environment
var Environment = PRODUCTION

//A map of environments and their corresponding servers/baseurls
 var EnvironmentsMap = map[Environments](map[Servers]string){

    PRODUCTION : map[Servers]string{
        DEFAULT:"http://apimatic.hopto.org:{suites}",
        AUTH_SERVER:"http://apimaticauth.hopto.org:3000",
    },

    TESTING : map[Servers]string{
        DEFAULT:"http://localhost:3000",
        AUTH_SERVER:"http://apimaticauth.xhopto.org:3000",
    },
}
 
// Make and return the map of parameters
func GetBaseURIParameters(config CONFIGURATION) map[string]interface{} {
     kvpMap := map[string]interface{}{
         "port": config.Port(),
         "suites": models_pkg.SuiteCodeEnumToValue(config.Suites()),
    }
    return kvpMap;
}

// Gets the URL for a particular alias in the current environment and appends it with template parameters
// return the baseurl
func GetBaseURI(server Servers, config CONFIGURATION) string {
    url := EnvironmentsMap[Environment][server]
    appendedURL, _ := apihelper_pkg.AppendUrlWithTemplateParameters(url, GetBaseURIParameters(config))
    return appendedURL

}
